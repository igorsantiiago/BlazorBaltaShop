@page "/products"
@inject ApplicationDbContext Contexts
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Produtos</h3>

<a href="/products/create" class="btn btn-primary">Adicionar Produto</a>

@if (!Products.Any())
{
	<p class="text-center fw-bold">Carregando os produtos...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>ID</th>
				<th>Produto</th>
				<th>Categoria</th>
				<th>Preço</th>
				<th></th>
			</tr>
		</thead>

		<tbody>
			@foreach(var product in Products)
			{
				<tr>
					<td>@product.Id</td>
					<td>
						<a href="/products/@product.Id">
							@product.Title
						</a>
					</td>
					<td>@product.Category.Title</td>
					<td>@product.Price.ToString("C", new CultureInfo("pt-BR"))</td>
					<td>
						<a href="/products/edit/@product.Id" class="btn btn-outline-dark">Editar</a>
						&nbsp;&nbsp;
						<a href="/products/delete/@product.Id" class="btn btn-danger">Excluir</a>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	public IEnumerable<Product> Products { get; set; } = Enumerable.Empty<Product>();

	protected override async Task OnInitializedAsync()
		=> Products = await Contexts.Products.AsNoTracking().Include(x => x.Category).ToListAsync();
}
